{"version":3,"sources":["assets/casino-table.jpg","assets/menu.svg","components/Card.js","components/Button.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Container","styled","div","Value","p","props","first","suitColor","Suit","Card","card","suit","label","handleSuit","button","marginTop","marginLeft","deskDisplay","width","height","color","fontWeight","borderBottom","bg","blockedCursor","mobDisplay","Button","onClick","text","CasinoBg","Points","Title","h1","ContainerCards","ContainerButtons","ContainerPoints","ContainerPointsArrow","WrapperPoints","TextPoints","FinalMessage","App","state","cards","suits","deck","userCards","result","undefined","points","finalMessage","isRenderPoints","sominha","getCardValue","Number","createCard","forEach","push","value","setState","handleGetCard","Math","floor","random","handleNewCard","list","concat","length","sum","map","reduce","a","b","handleNewGame","handlePoints","renderPoints","renderCardGame","key","this","src","MenuIcon","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dc90e5b7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/casino-table.40279062.jpg\";","module.exports = __webpack_public_path__ + \"static/media/menu.7014f04b.svg\";","import React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.div`\n  position: relative;\n  margin-right: 1rem;\n  width: 8rem;\n  height: 12rem;\n  border: 1px solid;\n  border-radius: 8px;\n  background: #fff;\n  font-family: 'Overpass', Regular;\n\n  @media(max-width: 648px) {\n    margin-bottom: 1rem;\n  }\n`; \n\nconst Value = styled.p`\n  position: absolute;\n  top: ${(props) => props.first && '0'};\n  right: ${(props) => !props.first && '.5rem'};\n  left: ${(props) => props.first && '.5rem'};\n  bottom: ${(props) => !props.first && '0'};\n  color: ${(props) => props.suitColor ? 'red' : '#000'}\n`;\n\nconst Suit = styled.p`\n  height: 5rem;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  font-size: 3rem;\n  color: ${(props) => props.suitColor ? 'red' : '#000'}\n`;\n\nfunction Card(props) {\n\n  const { card } = props;\n\n  const handleSuit = () => {\n    switch(card.suit) {\n      case \"copas\":\n        return '♥'\n      case \"paus\":\n        return '♣'\n      case \"espadas\":\n        return '♠'\n      case \"ouros\":\n        return '♦'\n      default: return ''\n    }\n  }\n\n  const suit = card.suit !== 'paus' && card.suit !== 'espadas';\n\n  return (\n    <Container>\n      <Value\n        first\n        suitColor={suit}\n      >\n        {card.label}\n      </Value>\n      <Suit\n        suitColor={suit}\n      >\n        {handleSuit()}\n      </Suit>\n      <Value\n        suitColor={suit}\n      >\n        {card.label}\n      </Value>\n    </Container>\n  );\n}\n\nexport default Card;\n","// Libs\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst Container = styled.button`\n  margin-right: .5rem;\n  margin-top: ${(props) => props.marginTop};\n  margin-left: ${(props) => props.marginLeft};\n  display: ${(props) => props.deskDisplay && props.deskDisplay};\n  width: ${(props) => props.width ? props.width : '18rem'};\n  height: ${(props) => props.height ? props.height : '4rem'};\n  color: ${(props) => props.color ? props.color : '#fff'};\n  font-family: 'Overpass', Bold;\n  font-size: .9rem;\n  font-weight: ${(props) => props.fontWeight ? props.fontWeight : '800'};\n  border-radius: 8px;\n  border: none;\n  border-bottom: ${(props) => props.borderBottom};\n  background: ${(props) => props.bg ? props.bg : '#20bf55'};\n  cursor: ${(props) => props.blockedCursor ? 'not-allowed' : 'pointer'};\n\n  @media(max-width: 648px) {\n    margin: 0;\n    margin: .5rem;\n    width: 16rem;\n    display: ${(props) => props.mobDisplay && props.mobDisplay};\n  }\n`;\n\nconst Button = (props) => (\n  <Container\n    marginTop={props.marginTop}\n    marginLeft={props.marginLeft}\n    width={props.width}\n    height={props.height}\n    color={props.color}\n    bg={props.bg}\n    borderBottom={props.borderBottom}\n    fontWeight={props.fontWeight}\n    onClick={props.onClick}\n    blockedCursor={props.blockedCursor}\n    deskDisplay={props.deskDisplay}\n    mobDisplay={props.mobDisplay}\n  >\n    {props.text}\n  </Container>\n);\n\n\nexport default Button;\n","// Libs\nimport React, { Component } from 'react';\nimport styled from 'styled-components';\n\n// Components\nimport Card from './components/Card';\nimport Button from './components/Button';\n\n// Images\nimport CasinoBg from './assets/casino-table.jpg';\nimport MenuIcon from './assets/menu.svg';\n\n// Styles\nconst Container = styled.div`\n  width: 100%;\n  min-height: 100vh;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  background-image: url(${CasinoBg});\n  font-family: 'Overpass', Bold;\n\n  @media(max-width: 648px) {\n    background-position-x: center;\n    background-position-y: center;\n  }\n`;\n\nconst Points = styled.div`\n  img {\n    display: none;\n  }\n\n  @media(max-width: 648px) {\n    width: 100%;\n    display: flex;\n    justify-content: flex-end;\n\n    img {\n      margin: .5rem;\n      width: 2rem;\n      display: flex;\n    }\n  }\n`;\n\nconst Title = styled.h1`\n  color: #fff;\n  font-weight: 800;\n\n  @media(max-width: 648px) {\n    font-size: 1.5rem;\n  }\n`;\n\nconst ContainerCards = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n\n  @media(max-width: 648px) {\n    margin: 1rem;\n    justify-content: center;\n  }\n`;\n\nconst ContainerButtons = styled.div`\n  position: fixed;\n  bottom: 0;\n  margin-bottom: 1rem;\n  width: 100%;\n  display: flex;\n  justify-content: center;\n`;\n\nconst ContainerPoints = styled.div`\n  position: relative;\n  z-index: 2;\n`;\n\nconst ContainerPointsArrow = styled.div`\n  position: absolute;\n  top: 0.5rem;\n  right: 3rem;\n  border-left: 10px solid transparent;\n  border-right: 10px solid transparent;\n  border-bottom: 13px solid #fff;\n\n  @media(max-width: 648px) {\n    top: 3rem;\n    right: 1rem;\n  }\n`;\n\nconst WrapperPoints = styled.div`\n  position: absolute;\n  top: 1.2rem;\n  right: 0;\n  padding: 1rem;\n  display: flex;\n  justify-content: center;\n  flex-direction: column;\n  align-items: center;\n  background: #fff;\n  border-radius: 10px;\n  z-index: 2;\n\n  @media(max-width: 648px) {\n    top: 3.8rem;\n  }\n`;\n\nconst TextPoints = styled.p`\n  color: #000;\n  font-size: 1rem;\n\n  @media(max-width: 648px) {\n    width: max-content;\n  }\n`;\n\nconst FinalMessage = styled.p`\n  color: #fff;\n  font-size: 1.3rem;\n\n  @media(max-width: 648px) {\n    margin-top: 12rem;\n    text-align: center;\n  }\n`;\n\nclass App extends Component {\n  state = {\n    cards: [\"A\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\", \"10\", \"J\", \"Q\", \"K\"],\n    suits: [\"paus\", \"copas\", \"espadas\", \"ouros\"],\n    deck: [],\n    userCards: [],\n    result: undefined,\n    points: 0,\n    finalMessage: undefined,\n    isRenderPoints: false,\n    sominha: 0,\n  }\n\n  componentDidMount() {\n    this.createCard();\n  }\n\n  // Verificar o valor da carta\n  getCardValue = (card) => {\n    if (card === 'A') {\n      return 1;\n    }\n\n    if (card === 'J' || card === 'Q' || card === 'K') {\n      return 10;\n    }\n\n    return Number(card);\n  }\n\n  // Criar uma carta e enviar para a lista deck\n  createCard = () => {\n    const { cards, suits, deck } = this.state;\n\n    cards.forEach((card) => {\n      suits.forEach((suit) => {\n        deck.push({\n          label: card,\n          value: this.getCardValue(card),\n          suit\n        })\n      })\n    })\n\n    this.setState({\n      deck,\n    });\n  }\n\n  // Gerar uma carta aleatória\n  handleGetCard = () => {\n    const { deck } = this.state;\n\n    const index = Math.floor(Math.random() * (51 - 0 + 1)) + 0;\n\n    return deck[index];\n  }\n\n  // Gerar uma nova carta\n  handleNewCard = () => {\n    const { userCards, points, sominha } = this.state;\n\n    let card = this.handleGetCard();\n\n    let list = userCards.concat(card);\n\n    this.setState({\n      userCards: list,\n    });\n\n    if (userCards.length > 0) {\n      const values = list.map((card) => card.value);\n      let sum = values.reduce((a, b) => {return a + b}, 0);\n\n      // Para atrasar sum\n      this.setState({\n        sominha: sum,\n      });\n\n      if (sominha > 21) {\n        this.setState({\n          sominha: sominha,\n          finalMessage: 'Você perdeu :('\n        })\n\n        return;\n      } \n  \n      if (sominha === 21) {\n        this.setState({\n          points: points + 1,\n          finalMessage: 'Você ganhou!!! Jogue novamente!'\n        })\n        return;\n      }\n    }\n  }\n\n  handleNewGame = () => {\n    this.setState({\n      userCards: [], \n      sominha: 0,\n      finalMessage: false,\n    });\n  }\n\n  handlePoints = () => {\n    this.setState({\n      isRenderPoints: !this.state.isRenderPoints,\n    });\n  }\n\n  renderPoints = () => {\n    const { points } = this.state;\n\n    return (\n      <ContainerPoints>\n        <ContainerPointsArrow />\n        <WrapperPoints>\n          <TextPoints>{points} é a sua pontuação até o momento.</TextPoints>\n          <TextPoints>{points > 0 ? 'Continue testando' : 'Teste'} a sua sorte!</TextPoints>\n        </WrapperPoints>\n      </ContainerPoints>\n    )\n  }\n\n  // Renderizar o jogo\n  renderCardGame = () => {\n    const { userCards, finalMessage } = this.state;\n\n    return (\n      <>\n        {!finalMessage ? (\n          <ContainerCards>\n            {userCards.map((card) => (\n              <div key={card}>\n                <Card card={card} />\n              </div>\n            ))}\n          </ContainerCards>\n        ) : <FinalMessage>{finalMessage}</FinalMessage>}\n        <ContainerButtons>\n          <Button\n            text='Nova Carta'\n            onClick={this.handleNewCard}\n            bg={finalMessage && '#00000026'}\n            blockedCursor={finalMessage}\n          />\n          <Button\n            bg='red'\n            text='Novo jogo'\n            onClick={this.handleNewGame} \n          />\n        </ContainerButtons>\n      </>\n    )\n  }\n\n  render() {\n    const { isRenderPoints } = this.state;\n\n    return (\n      <Container onClick={() => isRenderPoints && this.setState({ isRenderPoints: false })}>\n        <Points>\n          <Button\n            marginTop='1rem'\n            marginLeft='70rem'\n            color='#fff'\n            bg='transparent'\n            borderBottom='1px solid'\n            width='auto'\n            height='auto'\n            fontWeight='600'\n            text='Pontuação +'\n            mobDisplay='none'\n            onClick={this.handlePoints}\n          />\n          <img src={MenuIcon} alt=\"menu\" onClick={this.handlePoints} />\n          {isRenderPoints && this.renderPoints()}\n        </Points>\n        <Title>Jogue agora 21!</Title>\n        <Title>{this.state.sominha}</Title>\n        {this.renderCardGame()}\n      </Container>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}